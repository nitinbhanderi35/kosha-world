g4KS44KSC4KS44KWN4KSV4KWD4KSk4KSu4KWNPC9zcGFuPlxyXG4gICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaC0xMVwiIHN0eWxlPXt7IHRyYW5zZm9ybTogXCJyb3RhdGVZKDE4MGRlZylcIn19IHNyYz1cIi9zdGF0aWMvaW1hZ2VzL2hhbmQuc3ZnXCIgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9XCJoLWZ1bGwgbWluLWgtWzkyLjd2aF0gcHgtOCBzbTpweC0xNiB4bDpweC0yNCAyeGw6cHgtNDAgbXQtMTZcIlxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKC9zdGF0aWMvaW1hZ2VzL3RhYmxlXzIucG5nKVwiLFxyXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6IGAxMDAlICR7c2l6ZX1weGAsXHJcbiAgICAgICAgfX1cclxuICAgICAgPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBzbTpncmlkLWNvbHMtMiBtZDpncmlkLWNvbHMtMyBsZzpncmlkLWNvbHMtNCB4bDpncmlkLWNvbHMtNSAyeGw6Z3JpZC1jb2xzLTYgZ2FwLXgtNCBzbTpnYXAteC04XCI+XHJcbiAgICAgICAgICB7LyogPGRpdlxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ6LTEwIHJlbGF0aXZlIGgtWzE4NHB4XSB3LVsxMzZweF0gbXQtMTYgdHJhbnNpdGlvbi1vcGFjaXR5XCJcclxuICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlWSgtMTglKVwiLFxyXG4gICAgICAgICAgICAgIHRyYW5zaXRpb246IFwib3BhY2l0eSAxLjVzXCIsXHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWxhdGl2ZSBibG9jayBoLWZ1bGwgdy1mdWxsIHdpbGwtY2hhbmdlLWF1dG8gZHVyYXRpb24tNTAwXCJcclxuICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9e2hhbmRsZUhvdmVyfVxyXG4gICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17aGFuZGxlVW5ob3Zlcn1cclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzJiMmIyYlwiLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtU3R5bGU6IFwicHJlc2VydmUtM2RcIixcclxuICAgICAgICAgICAgICAgIGJveFNoYWRvdzogXCIwcHggLTNweCAyMHB4IC0ycHggYmxhY2tcIixcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNIb3ZlcmVkID8gXCJyb3RhdGUzZCgwLCAxLCAwLCAzNWRlZylcIiA6IFwibm9uZVwiLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgI