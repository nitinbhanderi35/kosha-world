import LottieAnimation from "@/components/LottieAnimation";
import SimpleDescriptionCard from "@/components/card/SimpleDescriptionCard";
import TabDescriptionCard from "@/components/card/TabDescriptionCard";
import TitleCard from "@/components/card/TitleCard";
import {
  convertToEnglish,
  convertToHindi,
  getKarmaName,
  getPadaName,
  getSetName,
  stringNumberHindi,
} from "@/utils/Function";
import Link from "next/link";
import React, { memo, useRef } from "react";
import { useEffect } from "react";
import { useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { IoIosArrowBack, IoIosArrowForward } from "react-icons/io";
import { useRouter } from "next/router";
import { IoCloseSharp } from "react-icons/io5";
import { MultiSelect } from "react-multi-select-component";
import { useMediaQuery } from "react-responsive";

const DhatuId = ({ dhatu_id }) => {
  const router = useRouter();
  const [dhatupath, setDhatupath] = useState([]);
  const [filterDhatu, setFilterDhatu] = useState([]);
  const isMobile = useMediaQuery({ query: "(max-width: 640px)" });
  const [isListOpen, setIsListOpen] = useState(isMobile ? false : true);
  const [currentDhatu, setCurrentDhatu] = useState();
  const [loading, setLoading] = useState(false);
  const [isAnimationComplete, setAnimationComplete] = useState(false);
  const listRef = useRef(null);
  const [selected, setSelected] = useState([]);
  const [options, setOptions] = useState([
    {
      value: "kashikaapravachanam",
      label: "॥ अष्टाध्यायी प्रवचनम् ॥",
      key: 1,
    },
    {
      value: "kashika",
      label: "॥ काशिका ॥",
      key: 2,
    },
    {
      value: "nyasah",
      label: "॥ न्यासः ॥",
      key: 3,
    },
    {
      value: "padapanjari",
      label: "॥ पदपञ्जरी ॥",
      key: 4,
    },
    {
      value: "shabdakaustubhah",
      label: "॥ शब्दकौस्तुभः ॥",
      key: 5,
    },
    {
      value: "vyakaransiddhantasudhanidhih",
      label: "॥ व्याकरणसिद्धान्तसुधानिधिः ॥",
      key: 6,
    },
    {
      value: "siddhantakaumudi",
      label: "॥ सिद्धान्तकौमुदी ॥",
      key: 7,
    },
    {
      value: "balamanorama",
      label: "॥ बालमनोरमा ॥",
      key: 8,
    },
    {
      value: "tatvabodhini",
      label: "॥ तत्त्वबोधिनी ॥",
      key: 9,
    },
    {
      value: "lakshmitika",
      label: "॥ लक्ष्मीटीका ॥",
      key: 10,
    },
    {
      value: "shabdendusekharah",
      label: "॥ बृहच्छब्देन्दुशेखरः ॥",
      key: 11,
    },
    {
      value: "yogeshwardasaswamy",
      label: "॥ डॉ. योगेश्वरस्वामी - सरधारधाम ॥",
      key: 12,
    },
    {
      value: "praudhamanorama_sanskrit",
      label: "॥ प्रौढमनोरमा - संस्कृतव्याख्या ॥",
      key: 13,
    },
    {
      value: "praudhamanorama_hindi",
      label: "॥ प्रौढमनोरमा-शब्दरत्न - हिन्दी ॥",
      key: 14,
    },
    {
      value: "laghushabdendushekhar_sanskrit",
      label: "॥ लघुशब्देन्दुशेखरः - संस्कृतव्याख्या ॥",
      key: 15,
    },
    {
      value: "laghushabdendushekhar_hindi",
      label: "॥ लघुशब्देन्दुशेखरः - हिन्दी ॥",
      key: 16,
    },
  ]);

  console.log("currentDhatu--------", currentDhatu);
  const fetchDhatuList = async () => {
    try {
      const res = await fetch(`/api/dhatu`);
      const data = await res.json();
      setDhatupath(data.data);
      setFilterDhatu(data.data);
    } catch (error) {
      console.error("Error fetchDhatuList:", error);
    }
  };

  useEffect(() => {
    fetchDhatuList();
  }, []);

  const getCurrentDhatu = async () => {
    try {
      setLoading(true);
      const res = await fetch(
        `/api/dhatu?chapter=${dhatu_id.split(".")[0]}&dhatu=${
          dhatu_id.split(".")[1]
        }`
      );
      const data = await res.json();
      setCurrentDhatu(data.data);
      setLoading(false);
    } catch (error) {
      setLoading(false);
      console.log("getCurrentDhatu catch", error);
    }
  };

  useEffect(() => {
    getCurrentDhatu();
  }, [dhatu_id]);

  const handelDhatuSearch = async (val) => {
    if (val.length > 0) {
      const filterData = dhatupath.filter((s) => {
        if (
          s?.word.includes(val) ||
          s?.chapter.includes(val) ||
          convertToHindi(`${s?.chapter}.${s?.dhatu}`) == convertToHindi(val)
        ) {
          return true;
        }
      });
      setFilterDhatu(filterData);
    } else {
      setFilterDhatu(dhatupath);
    }
  };

  const handlePage = (page) => {
    const currentObject = dhatupath?.find(
      (obj) =>
        obj.chapter == dhatu_id.split(".")[0] &&
        obj.dhatu == dhatu_id.split(".")[1]
    );
    const currentIndexInArray = dhatupath?.indexOf(currentObject);
    if (page == "NEXT") {
      const nextObject = dhatupath && dhatupath[currentIndexInArray + 1];
      return nextObject
        ? `/${nextObject?.chapter}.${nextObject?.dhatu}`
        : dhatu_id;
    }
    if (page == "PREVIOUS") {
      const nextObject = dhatupath && dhatupath[currentIndexInArray - 1];
      return nextObject
        ? `/${nextObject?.chapter}.${nextObject?.dhatu}`
        : dhatu_id;
    }
  };

  const ItemComponent = ({ item, index }) => {
    return (
      <div
        key={index}
        data-id={`${item?.book}-${item?.chapter}-${item?.sutra}`}
        onClick={() => {
          console.log(router);
          router.replace(`/dhatu/${item?.chapter}.${item?.dhatu}`);
          if (isMobile) setIsListOpen(false);
        }}
        className={`cursor-pointer  ${
          `${item.chapter}.${item.dhatu}` == dhatu_id ? "bg-title-card" : ""
        } flex items-center gap-2 font-bold border-b border-border_c p-2 hover:bg-body`}
      >
        <div className="p-1 bg-title-card rounded text-subheading">
          {stringNumberHindi(`${item?.chapter}.${item?.dhatu}`)}
        </div>
        <div className="break-all text-red">{item?.word}</div>
      </div>
    );
  };

  const Item = memo(ItemComponent);
  Item.displayName = "Item";

  return (
    <div className="min-h-screen flex flex-col items-center p-4 ">
      {!loading && !isListOpen && (
        <div className="relative z-10 lg:hidden">
          <motion.button
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            style={{ top: "50%", left: "16px" }}
            onClick={() => router.push(`/dhatu/${handlePage("PREVIOUS")}`)}
            className="fixed transform -translate-y-1/2 bg-title-card text-white p-2 rounded-full shadow-lg text-subheading"
          >
            <IoIosArrowBack className="h-6 w-6" />
          </motion.button>

          <motion.button
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={() => router.push(`/dhatu/${handlePage("NEXT")}`)}
            style={{ top: "50%", right: "16px" }}
            className="fixed  transform -translate-y-1/2 bg-title-card text-white p-2 rounded-full shadow-lg text-subheading"
          >
            <IoIosArrowForward className="h-6 w-6" />
          </motion.button>
        </div>
      )}
      <div className="mt-4 w-full flex flex-col gap-2 md:px-4">
        <TitleCard className={"overflow-y-hidden"} mainTitle={"॥ धातुपाठः ॥"}>
          <Link
            className="flex-shrink-0 hover:underline font-bold"
            href={`/dhatu`}
          >
            ॥ धातुपाठः ॥
          </Link>
          <span>&#62;</span>
          <span>{currentDhatu?.word}</span>
        </TitleCard>

        {loading ? (
          <LottieAnimation />
        ) : (
          <div class={` mt-4 w-full flex flex-row gap-4`}>
            <div
              className={`${isListOpen ? "hidden md:block" : "block"} w-full `}
            >
              <div
                className={
                  "sticky top-[60px] md:top-[80px] lg:top-[80px]  lg:py-4  min-h-[50px] flex flex-col gap-4 text-xl rounded border-2 border-border_c bg-card"
                }
              >
                <div className="relative flex flex-row items-center gap-2 justify-center px-2">
                  <div className="grow flex flex-col items-center gap-2 justify-center">
                    <div className="text-subheading text-lg">
                      {stringNumberHindi(
                        `${currentDhatu?.chapter}.${currentDhatu?.dhatu}`
                      )}
                    </div>
                    <div className="flex items-center gap-4">
                      <motion.button
                        initial={{ opacity: 0, x: -50 }}
                        animate={{ opacity: 1, x: 0 }}
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={() =>
                          router.push(`/dhatu/${handlePage("PREVIOUS")}`)
                        }
                        className="hidden lg:block bg-title-card text-white p-2 rounded-full shadow-lg text-subheading"
                      >
                        <IoIosArrowBack className="h-6 w-6" />
                      </motion.button>
                      <div
                        className="font-bold text-center text-xl lg:text-3xl text-sutra"
                        dangerouslySetInnerHTML={{
                          __html: `${currentDhatu?.word}`,
                        }}
                      />
                      <motion.button
                        initial={{ opacity: 0, x: 50 }}
                        animate={{ opacity: 1, x: 0 }}
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={() =>
                          router.push(`/dhatu/${handlePage("NEXT")}`)
                        }
                        className="hidden lg:block bg-title-card text-white p-2 rounded-full shadow-lg text-subheading"
                      >
                        <IoIosArrowForward className="h-6 w-6" />
                      </motion.button>
                    </div>
                    <div className="flex gap-2 items-center">
                        <div className="inline break-words font-normal">
                          <span className="inline pl-3 text-muted">
                            {currentDhatu?.aupadeshik}
                          </span>
                          <span className="inline pl-1 text-muted">
                            {currentDhatu?.artha}
                          </span>
                          <span className="inline pl-3 ">
                            {currentDhatu?.split(".")[0] == "01"
                              ? "भ्वादिः"
                              : currentDhatu?.split(".")[0] == "02"
                              ? "अदादिः"
                              : currentDhatu?.split(".")[0] == "03"
                              ? "जुहोत्यादिः"
                              : currentDhatu?.split(".")[0] == "04"
                              ? "दिवादिः"
                              : currentDhatu?.split(".")[0] == "05"
                              ? "स्वादिः"
                              : currentDhatu?.split(".")[0] == "06"
                              ? "तुदादिः"
                              : currentDhatu?.split(".")[0] == "07"
                              ? "रुधादिः"
                              : currentDhatu?.split(".")[0] == "08"
                              ? "तनादिः"
                              : currentDhatu?.split(".")[0] == "09"
                              ? "क्र्यादिः"
                              : currentDhatu?.split(".")[0] == "10"
                              ? "चुरादिः"
                              : ""}
                          </span>
                          <span className="inline pl-1 ">
                            {getPadaName(currentDhatu?.pada)}
                          </span>
                          <span className="inline pl-1 ">
                            {getKarmaName(currentDhatu?.karma)}
                          </span>
                          <span className="inline pl-1 ">
                            {getSetName(currentDhatu?.settva)}
                          </span>
                          {currentDhatu?.english && (
                            <span className="inline pl-3 text-muted">{`(${currentDhatu?.english})`}</span>
                          )}
                          {currentDhatu?.hindi && (
                            <span className="inline pl-3 text-muted">{`(${currentDhatu?.hindi})`}</span>
                          )}
                        </div>
                      </div>
                  </div>

                  <div
                    onClick={() => {
                      setIsListOpen(!isListOpen);
                    }}
                    className="absolute top-2 md:top-0 right-4 cursor-pointer flex justify-center items-center bg-title-card greey:bg-card rounded w-20 md:w-28 h-8 md:h-10 text-lg md:text-xl text-subheading"
                  >
                    धातु: <IoIosArrowForward />
                  </div>
                </div>
              </div>

              <SimpleDescriptionCard
                className={"mt-4 p-4 text-brown"}
                title={"॥ व्याख्या:॥"}
                description={currentDhatu?.data}
              />
            </div>
            <AnimatePresence>
              {isListOpen && (
                <motion.aside
                  initial={{ width: 0 }}
                  animate={{
                    width: 400,
                    transition: { duration: 0.1 },
                  }}
                  exit={{
                    width: 0,
                    transition: { duration: 0.1 },
                  }}
                  onAnimationComplete={() => setAnimationComplete(true)}
                  className={` w-full lg:w-[20%] xl:w-[20%]`}
                >
                  <div
                    className={`sticky top-[50px] lg:top-[80px] ${
                      isListOpen ? "block" : "hidden lg:flex"
                    } `}
                  >
                    <div className="border-2 border-border_c h-[calc(100vh-100px)] w-full rounded overflow-x-auto bg-card">
                      <div className="p-2 sticky top-0 bg-card flex flex-col items-center">
                        <div className="relative flex gap-4 items-center w-full">
                          <div className="grow text-center font-bold text-subheading text-lg">
                            ॥ धातुपाठः॥
                          </div>
                          <div
                            className={`absolute top-0 text-subheading right-0 cursor-pointer justify-center items-center flex bg-title-card greey:bg-card rounded w-8 h-8 text-xl`}
                            onClick={() => {
                              setIsListOpen(false);
                              setAnimationComplete(false);
                            }}
                          >
                            <IoCloseSharp />
                          </div>
                        </div>
                        <div className="pt-4 w-full bg-card flex items-center">
                          <input
                            type="search"
                            onChange={(e) =>
                              handelDhatuSearch(e.target.value.trim())
                            }
                            id="dhatu"
                            className="grow p-1 md:p-2 px-4 text-lg lg:text-xl rounded-lg focus:outline-none w-full border border-primary"
                            placeholder="Search Dhatu"
                            autoComplete="off"
                          />
                        </div>
                      </div>

                      {isAnimationComplete && (
                        <div ref={listRef} className="flex flex-col m-2">
                          {filterDhatu &&
                            filterDhatu?.map((dhatu, index) => {
                              return (
                                <Item key={index} item={dhatu} index={index} />
                              );