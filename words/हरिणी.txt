ert("TSImportEqualsDeclaration",e,t)}function assertTSExternalModuleReference(e,t){assert("TSExternalModuleReference",e,t)}function assertTSNonNullExpression(e,t){assert("TSNonNullExpression",e,t)}function assertTSExportAssignment(e,t){assert("TSExportAssignment",e,t)}function assertTSNamespaceExportDeclaration(e,t){assert("TSNamespaceExportDeclaration",e,t)}function assertTSTypeAnnotation(e,t){assert("TSTypeAnnotation",e,t)}function assertTSTypeParameterInstantiation(e,t){assert("TSTypeParameterInstantiation",e,t)}function assertTSTypeParameterDeclaration(e,t){assert("TSTypeParameterDeclaration",e,t)}function assertTSTypeParameter(e,t){assert("TSTypeParameter",e,t)}function assertStandardized(e,t){assert("Standardized",e,t)}function assertExpression(e,t){assert("Expression",e,t)}function assertBinary(e,t){assert("Binary",e,t)}function assertScopable(e,t){assert("Scopable",e,t)}function assertBlockParent(e,t){assert("BlockParent",e,t)}function assertBlock(e,t){assert("Block",e,t)}function assertStatement(e,t){assert("Statement",e,t)}function assertTerminatorless(e,t){assert("Terminatorless",e,t)}function assertCompletionStatement(e,t){assert("CompletionStatement",e,t)}function assertConditional(e,t){assert("Conditional",e,t)}function assertLoop(e,t){assert("Loop",e,t)}function assertWhile(e,t){assert("While",e,t)}function assertExpressionWrapper(e,t){assert("ExpressionWrapper",e,t)}function assertFor(e,t){assert("For",e,t)}function assertForXStatement(e,t){assert("ForXStatement",e,t)}function assertFunction(e,t){assert("Function",e,t)}function assertFunctionParent(e,t){assert("FunctionParent",e,t)}function assertPureish(e,t){assert("Pureish",e,t)}function assertDeclaration(e,t){assert("Declaration",e,t)}function assertPatternLike(e,t){assert("PatternLike",e,t)}function assertLVal(e,t){assert("LVal",e,t)}function assertTSEntityName(e,t){assert("TSEntityName",e,t)}function assertLiteral(e,t){assert("Literal",e,t)}function assertImmutable(e,t){assert("Immutable",e,t)}function assertUserWhitespacable(e,t){assert("UserWhitespacable",e,t)}function assertMethod(e,t){assert("Method",e,t)}function assertObjectMember(e,t){assert("ObjectMember",e,t)}function assertProperty(e,t){assert("Property",e,t)}function assertUnaryLike(e,t){assert("UnaryLike",e,t)}function assertPattern(e,t){assert("Pattern",e,t)}function assertClass(e,t){assert("Class",e,t)}function assertImportOrExportDeclaration(e,t){assert("ImportOrExportDeclaration",e,t)}function assertExportDeclaration(e,t){assert("ExportDeclaration",e,t)}function assertModuleSpecifier(e,t){assert("ModuleSpecifier",e,t)}function assertAccessor(e,t){assert("Accessor",e,t)}function assertPrivate(e,t){assert("Private",e,t)}function assertFlow(e,t){assert("Flow",e,t)}function assertFlowType(e,t){assert("FlowType",e,t)}function assertFlowBaseAnnotation(e,t){assert("FlowBaseAnnotation",e,t)}function assertFlowDeclaration(e,t){assert("FlowDeclaration",e,t)}function assertFlowPredicate(e,t){assert("FlowPredicate",e,t)}function assertEnumBody(e,t){assert("EnumBody",e,t)}function assertEnumMember(e,t){assert("EnumMember",e,t)}function assertJSX(e,t){assert("JSX",e,t)}function assertMiscellaneous(e,t){assert("Miscellaneous",e,t)}function assertTypeScript(e,t){assert("TypeScript",e,t)}function assertTSTypeElement(e,t){assert("TSTypeElement",e,t)}function assertTSType(e,t){assert("TSType",e,t)}function assertTSBaseType(e,t){assert("TSBaseType",e,t)}function assertNumberLiteral(e,t){(0,s.default)("assertNumberLiteral","assertNumericLiteral");assert("NumberLiteral",e,t)}function assertRegexLiteral(e,t){(0,s.default)("assertRegexLiteral","assertRegExpLiteral");assert("RegexLiteral",e,t)}function assertRestProperty(e,t){(0,s.default)("assertRestProperty","assertRestElement");assert("RestProperty",e,t)}function assertSpreadProperty(e,t){(0,s.default)("assertSpreadProperty","assertSpreadElement");assert("SpreadProperty",e,t)}function assertModuleDeclaration(e,t){(0,s.default)("assertModuleDeclaration","assertImportOrExportDeclaration");assert("ModuleDeclaration",e,t)}},3103:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:true});t["default"]=createFlowUnionType;var n=r(7453);var s=r(6627);function createFlowUnionType(e){const t=(0,s.default)(e);if(t.length===1){return t[0]}else{return(0,n.unionTypeAnnotation)(t)}}},785:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:true});t["default"]=void 0;var n=r(7453);var s=createTypeAnnotationBasedOnTypeof;t["default"]=s;function createTypeAnnotationBasedOnTypeof(e){switch(e){case"string":return(0,n.stringTypeAnnotation)();case"number":return(0,n.numberTypeAnnotation)();case"undefined":return(0,n.voidTypeAnnotation)();case"boolean":return(0,n.booleanTypeAnnotation)();case"function":return(0,n.genericTypeAnnotation)((0,n.identifier)("Function"));case"object":return(0,n.genericTypeAnnotation)((0,n.identifier)("Object"));case"symbol":return(0,n.genericTypeAnnotation)((0,n.identifier)("Symbol"));case"bigint":return(0,n.anyTypeAnnotation)()}throw new Error("Invalid typeof value: "+e)}},7453:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:true});t.anyTypeAnnotation=anyTypeAnnotation;t.argumentPlaceholder=argumentPlaceholder;t.arrayExpression=arrayExpression;t.arrayPattern=arrayPattern;t.arrayTypeAnnotation=arrayTypeAnnotation;t.arrowFunctionExpression=arrowFunctionExpression;t.assignmentExpression=assignmentExpression;t.assignmentPattern=assignmentPattern;t.awaitExpression=awaitExpression;t.bigIntLiteral=bigIntLiteral;t.binaryExpression=binaryExpression;t.bindExpression=bindExpression;t.blockStatement=blockStatement;t.booleanLiteral=booleanLiteral;t.booleanLiteralTypeAnnotation=booleanLiteralTypeAnnotation;t.booleanTypeAnnotation=booleanTypeAnnotation;t.breakStatement=breakStatement;t.callExpression=callExpression;t.catchClause=catchClause;t.classAccessorProperty=classAccessorProperty;t.classBody=classBody;t.classDeclaration=classDeclaration;t.classExpression=classExpression;t.classImplements=classImplements;t.classMethod=classMethod;t.classPrivateMethod=classPrivateMethod;t.classPrivateProperty=classPrivateProperty;t.classProperty=classProperty;t.conditionalExpression=conditionalExpression;t.continueStatement=continueStatement;t.debuggerStatement=debuggerStatement;t.decimalLiteral=decimalLiteral;t.declareClass=declareClass;t.declareExportAllDeclaration=declareExportAllDeclaration;t.declareExportDeclaration=declareExportDeclaration;t.declareFunction=declareFunction;t.declareInterface=declareInterface;t.declareModule=declareModule;t.declareModuleExports=declareModuleExports;t.declareOpaqueType=declareOpaqueType;t.declareTypeAlias=declareTypeAlias;t.declareVariable=declareVariable;t.declaredPredicate=declaredPredicate;t.decorator=decorator;t.directive=directive;t.directiveLiteral=directiveLiteral;t.doExpression=doExpression;t.doWhileStatement=doWhileStatement;t.emptyStatement=emptyStatement;t.emptyTypeAnnotation=emptyTypeAnnotation;t.enumBooleanBody=enumBooleanBody;t.enumBooleanMember=enumBooleanMember;t.enumDeclaration=enumDeclaration;t.enumDefaultedMember=enumDefaultedMember;t.enumNumberBody=enumNumberBody;t.enumNumberMember=enumNumberMember;t.enumStringBody=enumStringBody;t.enumStringMember=enumStringMember;t.enumSymbolBody=enumSymbolBody;t.existsTypeAnnotation=existsTypeAnnotation;t.exportAllDeclaration=exportAllDeclaration;t.exportDefaultDeclaration=exportDefaultDeclaration;t.exportDefaultSpecifier=exportDefaultSpecifier;t.exportNamedDeclaration=exportNamedDeclaration;t.exportNamespaceSpecifier=exportNamespaceSpecifier;t.exportSpecifier=exportSpecifier;t.expressionStatement=expressionStatement;t.file=file;t.forInStatement=forInStatement;t.forOfStatement=forOfStatement;t.forStatement=forStatement;t.functionDeclaration=functionDeclaration;t.functionExpression=functionExpression;t.functionTypeAnnotation=functionTypeAnnotation;t.functionTypeParam=functionTypeParam;t.genericTypeAnnotation=genericTypeAnnotation;t.identifier=identifier;t.ifStatement=ifStatement;t["import"]=_import;t.importAttribute=importAttribute;t.importDeclaration=importDeclaration;t.importDefaultSpecifier=importDefaultSpecifier;t.importNamespaceSpecifier=importNamespaceSpecifier;t.importSpecifier=importSpecifier;t.indexedAccessType=indexedAccessType;t.inferredPredicate=inferredPredicate;t.interfaceDeclaration=interfaceDeclaration;t.interfaceExtends=interfaceExtends;t.interfaceTypeAnnotation=interfaceTypeAnnotation;t.interpreterDirective=interpreterDirective;t.intersectionTypeAnnotation=intersectionTypeAnnotation;t.jSXAttribute=t.jsxAttribute=jsxAttribute;t.jSXClosingElement=t.jsxClosingElement=jsxClosingElement;t.jSXClosingFragment=t.jsxClosingFragment=jsxClosingFragment;t.jSXElement=t.jsxElement=jsxElement;t.jSXEmptyExpression=t.jsxEmptyExpression=jsxEmptyExpression;t.jSXExpressionContainer=t.jsxExpressionContainer=jsxExpressionContainer;t.jSXFragment=t.jsxFragment=jsxFragment;t.jSXIdentifier=t.jsxIdentifier=jsxIdentifier;t.jSXMemberExpression=t.jsxMemberExpression=jsxMemberExpression;t.jSXNamespacedName=t.jsxNamespacedName=jsxNamespacedName;t.jSXOpeningElement=t.jsxOpeningElement=jsxOpeningElement;t.jSXOpeningFragment=t.jsxOpeningFragment=jsxOpeningFragment;t.jSXSpreadAttribute=t.jsxSpreadAttribute=jsxSpreadAttribute;t.jSXSpreadChild=t.jsxSpreadChild=jsxSpreadChild;t.jSXText=t.jsxText=jsxText;t.labeledStatement=labeledStatement;t.logicalExpression=logicalExpression;t.memberExpression=memberExpression;t.metaProperty=metaProperty;t.mixedTypeAnnotation=mixedTypeAnnotation;t.moduleExpression=moduleExpression;t.newExpression=newExpression;t.noop=noop;t.nullLiteral=nullLiteral;t.nullLiteralTypeAnnotation=nullLiteralTypeAnnotation;t.nullableTypeAnnotation=nullableTypeAnnotation;t.numberLiteral=NumberLiteral;t.numberLiteralTypeAnnotation=numberLiteralTypeAnnotation;t.numberTypeAnnotation=numberTypeAnnotation;t.numericLiteral=numericLiteral;t.objectExpression=objectExpression;t.objectMethod=objectMethod;t.objectPattern=objectPattern;t.objectProperty=objectProperty;t.objectTypeAnnotation=objectTypeAnnotation;t.objectTypeCallProperty=objectTypeCallProperty;t.objectTypeIndexer=objectTypeIndexer;t.objectTypeInternalSlot=objectTypeInternalSlot;t.objectTypeProperty=objectTypeProperty;t.objectTypeSpreadProperty=objectTypeSpreadProperty;t.opaqueType=opaqueType;t.optionalCallExpression=optionalCallExpression;t.optionalIndexedAccessType=optionalIndexedAccessType;t.optionalMemberExpression=optionalMemberExpression;t.parenthesizedExpression=parenthesizedExpression;t.pipelineBareFunction=pipelineBareFunction;t.pipelinePrimaryTopicReference=pipelinePrimaryTopicReference;t.pipelineTopicExpression=pipelineTopicExpression;t.placeholder=placeholder;t.privateName=privateName;t.program=program;t.qualifiedTypeIdentifier=qualifiedTypeIdentifier;t.recordExpression=recordExpression;t.regExpLiteral=regExpLiteral;t.regexLiteral=RegexLiteral;t.restElement=restElement;t.restProperty=RestProperty;t.returnStatement=returnStatement;t.sequenceExpression=sequenceExpression;t.spreadElement=spreadElement;t.spreadProperty=SpreadProperty;t.staticBlock=staticBlock;t.stringLiteral=stringLiteral;t.stringLiteralTypeAnnotation=stringLiteralTypeAnnotation;t.stringTypeAnnotation=stringTypeAnnotation;t["super"]=_super;t.switchCase=switchCase;t.switchStatement=switchStatement;t.symbolTypeAnnotation=symbolTypeAnnotation;t.taggedTemplateExpression=taggedTemplateExpression;t.templateElement=templateElement;t.templateLiteral=templateLiteral;t.thisExpression=thisExpression;t.thisTypeAnnotation=thisTypeAnnotation;t.throwStatement=throwStatement;t.topicReference=topicReference;t.tryStatement=tryStatement;t.tSAnyKeyword=t.tsAnyKeyword=tsAnyKeyword;t.tSArrayType=t.tsArrayType=tsArrayType;t.tSAsExpression=t.tsAsExpression=tsAsExpression;t.tSBigIntKeyword=t.tsBigIntKeyword=tsBigIntKeyword;t.tSBooleanKeyword=t.tsBooleanKeyword=tsBooleanKeyword;t.tSCallSignatureDeclaration=t.tsCallSignatureDeclaration=tsCallSignatureDeclaration;t.tSConditionalType=t.tsConditionalType=tsConditionalType;t.tSConstructSignatureDeclaration=t.tsConstructSignatureDeclaration=tsConstructSignatureDeclaration;t.tSConstructorType=t.tsConstructorType=tsConstructorType;t.tSDeclareFunction=t.tsDeclareFunction=tsDeclareFunction;t.tSDeclareMethod=t.tsDeclareMethod=tsDeclareMethod;t.tSEnumDeclaration=t.tsEnumDeclaration=tsEnumDeclaration;t.tSEnumMember=t.tsEnumMember=tsEnumMember;t.tSExportAssignment=t.tsExportAssignment=tsExportAssignment;t.tSExpressionWithTypeArguments=t.tsExpressionWithTypeArguments=tsExpressionWithTypeArguments;t.tSExternalModuleReference=t.tsExternalModuleReference=tsExternalModuleReference;t.tSFunctionType=t.tsFunctionType=tsFunctionType;t.tSImportEqualsDeclaration=t.tsImportEqualsDeclaration=tsImportEqualsDeclaration;t.tSImportType=t.tsImportType=tsImportType;t.tSIndexSignature=t.tsIndexSignature=tsIndexSignature;t.tSIndexedAccessType=t.tsIndexedAccessType=tsIndexedAccessType;t.tSInferType=t.tsInferType=tsInferType;t.tSInstantiationExpression=t.tsInstantiationExpression=tsInstantiationExpression;t.tSInterfaceBody=t.tsInterfaceBody=tsInterfaceBody;t.tSInterfaceDeclaration=t.tsInterfaceDeclaration=tsInterfaceDeclaration;t.tSIntersectionType=t.tsIntersectionType=tsIntersectionType;t.tSIntrinsicKeyword=t.tsIntrinsicKeyword=tsIntrinsicKeyword;t.tSLiteralType=t.tsLiteralType=tsLiteralType;t.tSMappedType=t.tsMappedType=tsMappedType;t.tSMethodSignature=t.tsMethodSignature=tsMethodSignature;t.tSModuleBlock=t.tsModuleBlock=tsModuleBlock;t.tSModuleDeclaration=t.tsModuleDeclaration=tsModuleDeclaration;t.tSNamedTupleMember=t.tsNamedTupleMember=tsNamedTupleMember;t.tSNamespaceExportDeclaration=t.tsNamespaceExportDeclaration=tsNamespaceExportDeclaration;t.tSNeverKeyword=t.tsNeverKeyword=tsNeverKeyword;t.tSNonNullExpression=t.tsNonNullExpression=tsNonNullExpression;t.tSNullKeyword=t.tsNullKeyword=tsNullKeyword;t.tSNumberKeyword=t.tsNumberKeyword=tsNumberKeyword;t.tSObjectKeyword=t.tsObjectKeyword=tsObjectKeyword;t.tSOptionalType=t.tsOptionalType=tsOptionalType;t.tSParameterProperty=t.tsParameterProperty=tsParameterProperty;t.tSParenthesizedType=t.tsParenthesizedType=tsParenthesizedType;t.tSPropertySignature=t.tsPropertySignature=tsPropertySignature;t.tSQualifiedName=t.tsQualifiedName=tsQualifiedName;t.tSRestType=t.tsRestType=tsRestType;t.tSSatisfiesExpression=t.tsSatisfiesExpression=tsSatisfiesExpression;t.tSStringKeyword=t.tsStringKeyword=tsStringKeyword;t.tSSymbolKeyword=t.tsSymbolKeyword=tsSymbolKeyword;t.tSThisType=t.tsThisType=tsThisType;t.tSTupleType=t.tsTupleType=tsTupleType;t.tSTypeAliasDeclaration=t.tsTypeAliasDeclaration=tsTypeAliasDeclaration;t.tSTypeAnnotation=t.tsTypeAnnotation=tsTypeAnnotation;t.tSTypeAssertion=t.tsTypeAssertion=tsTypeAssertion;t.tSTypeLiteral=t.tsTypeLiteral=tsTypeLiteral;t.tSTypeOperator=t.tsTypeOperator=tsTypeOperator;t.tSTypeParameter=t.tsTypeParameter=tsTypeParameter;t.tSTypeParameterDeclaration=t.tsTypeParameterDeclaration=tsTypeParameterDeclaration;t.tSTypeParameterInstantiation=t.tsTypeParameterInstantiation=tsTypeParameterInstantiation;t.tSTypePredicate=t.tsTypePredicate=tsTypePredicate;t.tSTypeQuery=t.tsTypeQuery=tsTypeQuery;t.tSTypeReference=t.tsTypeReference=tsTypeReference;t.tSUndefinedKeyword=t.tsUndefinedKeyword=tsUndefinedKeyword;t.tSUnionType=t.tsUnionType=tsUnionType;t.tSUnknownKeyword=t.tsUnknownKeyword=tsUnknownKeyword;t.tSVoidKeyword=t.tsVoidKeyword=tsVoidKeyword;t.tupleExpression=tupleExpression;t.tupleTypeAnnotation=tupleTypeAnnotation;t.typeAlias=typeAlias;t.typeAnnotation=typeAnnotation;t.typeCastExpression=typeCastExpression;t.typeParameter=typeParameter;t.typeParameterDeclaration=typeParameterDeclaration;t.typeParameterInstantiation=typeParameterInstantiation;t.typeofTypeAnnotation=typeofTypeAnnotation;t.unaryExpression=unaryExpression;t.unionTypeAnnotation=unionTypeAnnotation;t.updateExpression=updateExpression;t.v8IntrinsicIdentifier=v8IntrinsicIdentifier;t.variableDeclaration=variableDeclaration;t.variableDeclarator=variableDeclarator;t.variance=variance;t.voidTypeAnnotation=voidTyp