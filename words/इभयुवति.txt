BpbnRlcm5hbFJlbmRlclRhc2sgb2YgaW50ZW50U3RhdGUucmVuZGVyVGFza3MpIHtcbiAgICAgICAgd2FpdE9uLnB1c2goaW50ZXJuYWxSZW5kZXJUYXNrLmNvbXBsZXRlZCk7XG4gICAgICAgIGludGVybmFsUmVuZGVyVGFzay5jYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9ianMuY2xlYXIoKTtcblxuICAgIGZvciAoY29uc3QgYml0bWFwIG9mIHRoaXMuX2JpdG1hcHMpIHtcbiAgICAgIGJpdG1hcC5jbG9zZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2JpdG1hcHMuY2xlYXIoKTtcblxuICAgIHRoaXMuX2Fubm90YXRpb25Qcm9taXNlcy5jbGVhcigpO1xuXG4gICAgdGhpcy5fanNBY3Rpb25zUHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5fc3RydWN0VHJlZVByb21pc2UgPSBudWxsO1xuICAgIHRoaXMucGVuZGluZ0NsZWFudXAgPSBmYWxzZTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwod2FpdE9uKTtcbiAgfVxuXG4gIGNsZWFudXAocmVzZXRTdGF0cyA9IGZhbHNlKSB7XG4gICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuX3RyeUNsZWFudXAocmVzZXRTdGF0cyk7XG4gIH1cblxuICBfdHJ5Q2xlYW51cChyZXNldFN0YXRzID0gZmFsc2UpIHtcbiAgICBpZiAoIXRoaXMucGVuZGluZ0NsZWFudXApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHtcbiAgICAgIHJlbmRlclRhc2tzLFxuICAgICAgb3BlcmF0b3JMaXN0XG4gICAgfSBvZiB0aGlzLl9pbnRlbnRTdGF0ZXMudmFsdWVzKCkpIHtcbiAgICAgIGlmIChyZW5kZXJUYXNrcy5zaXplID4gMCB8fCAhb3BlcmF0b3JMaXN0Lmxhc3RDaHVuaykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW50ZW50U3RhdGVzLmNsZWFyKCk7XG5cbiAgICB0aGlzLm9ianMuY2xlYXIoKTtcblxuICAgIHRoaXMuX2Fubm90YXRpb25Qcm9taXNlcy5jbGVhcigpO1xuXG4gICAgdGhpcy5fanNBY3Rpb25zUHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5fc3RydWN0VHJlZVByb21pc2UgPSBudWxsO1xuXG4gICAgaWYgKHJlc2V0U3RhdHMgJiYgdGhpcy5fc3RhdHMpIHtcbiAgICAgIHRoaXMuX3N0YXRzID0gbmV3IF9kaXNwbGF5X3V0aWxzLlN0YXRUaW1lcigpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgYml0bWFwIG9mIHRoaXMuX2JpdG1hcHMpIHtcbiAgICAgIGJpdG1hcC5jbG9zZSgpO1xuICAgIH1